function [newIm] = mapQuad2(im, pointsSet1, pointsSet2, transformType)

% determine transformation type:
if (transformType == 1)
    A = findAffineTransform(pointsSet1, pointsSet2);
else
    A = findProjectiveTransform(pointsSet1, pointsSet2);
end

% get generic cordinates vector:
M = getCordinatesVector(256);


polygon_src = inpolygon(M(1,:),M(2,:),pointsSet1(1,:),pointsSet1(2,:));
polygon_src_view = reshape(polygon_src,256,256);
imshow(polygon_src_view);
[x,y] = find(polygon_src_view);
X_src = [x,y];
X_src = [X_src'; ones(length(X_src),1)'];


polygon_dst = inpolygon(M(1,:),M(2,:),pointsSet2(1,:),pointsSet2(2,:));
polygon_dst_view = reshape(polygon_dst,256,256);
imshow(polygon_dst_view);
[x,y] = find(polygon_dst_view);
X_dest=[x,y];
X_dest = [X_dest'; ones(length(X_dest),1)'];
plot(pointsSet2(1,:),pointsSet2(2,:), "-", 'LineWidth',3, 'Color', 'blue')

testIm = zeros(256,256);
for i = 1:length(X_dest)
    x_s = X_dest(:,i);
    testIm(x_s(1),x_s(2))=250;
end
imshow(testIm);
plot(pointsSet2(1,:),pointsSet2(2,:), "-", 'LineWidth',3, 'Color', 'blue')

newIm = im;

X_t = A\X_dest;
X_t = round(X_t ./ X_t(3,:);

for i = 1:length(X_dest)
    
    x_d = X_dest(:,i);
    
    r = X_t(:,i);
%     r = A \ x_d; % <-> r = inv(A)*x_d;
%     r = round(r / r(3));
    
    if r(1) > 256 || r(1) < 1 || r(2) < 1 || r(2) > 256 
        newIm(x_d(1),x_d(2)) = 0;
        continue
    end
    
    % pixel assignment:
    newIm(x_d(2),x_d(1)) = im(r(2),r(1));
    
    % pixel sources:
%     newIm(r(2),r(1)) = im(x_d(2),x_d(1));
    
end

end


